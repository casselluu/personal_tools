#!/usr/local/bin/python
#coding=utf-8
'''
该程序的主要目的是对给定的fasta文件进行框架分析
'''
import os,re,argparse
from NGS_data_process import *
#定义一个function，该function的功能是通过给定的物种和轻重链的类型来获取框架的长id和短id
#输入参数：物种，轻重链类型
#输出结果：输出长、短框架的id
def get_frame_id(species_n,ctype="all"):
    #首先利用NGS_data_process中预定义的get_germline_db模块来获取数据库文件的绝对路径
    db_file=get_germline_db(species_n,ctype)
    #接下来获取所有的长、短id
    long_ids,short_ids=get_germline(db_file)

#定义一个function，该function的功能是通过给定的fasta文件进行blastp
#输入参数：氨基酸的fasta文件名，fasta文件所在的绝对路径
#输出结果：各个id的出现的多样性表格
def record_id_freq(species_n,path_n,fasta_file,ctype="all"):
    #首先根据物种的不同选择不同的id匹配的正则表达式
    regular_species={"human":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}-[\w]{1,3}[-]{0,1}[0-9]{0,1}\*[0-9]{2}",re.I),
                     "mouse":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}[*]{0,1}[-]{0,1}[\w]{1,3}[-]{0,1}[0-9]{0,1}[*]{0,1}[0-9]{1,2}",re.I),
                     "rabbit":re.compile("[a-zA-Z]{4}[0-9]{1,2}[\w]{0,2}[*]{0,1}[0-9]{2}",re.I),
                     "crab_eating":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}[-]{0,1}[\w]{1,3}[-]{0,1}[0-9]{0,1}\*[0-9]{2}",re.I),
                     "rhesus":re.compile("[a-zA-Z]{4}[0-9]{1,2}[\w]{0,2}[-]{0,1}[0-9]{1,2}[*]{0,1}[0-9]{2}",re.I)}
    pattern_long=regular_species[species_n]
    pattern_short=re.compile("[A-Za-z]{4}[0-9]{1,2}")
    os.chdir(path_n)
    #获取数据库的文件
    db_file=get_germline_db(species_n,ctype)
    header=os.path.splitext(fasta_file)[0]
    #新建一个文件用来储存最后的id的多样性的结果
    result_freq=open("%s_germline_freq.txt"%header,"w")
    result_freq.write("short_ids"+"\t"+"frequency"+"\n")
    #print db_file,fasta_file,header
    #print "blastp -db %s -query %s -outfmt 6 -max_target_seqs 1 -out %s_out.txt"%(db_file,fasta_file,header)
    #指定blastp来检索，并且指定blast的输出文件
    os.system("blastp -db %s -query %s -outfmt 6 -max_target_seqs 1 -max_hsps 1 -out %s_out.txt"%(db_file,fasta_file,header))
    #利用预定义的get_all_id程序来提取所有的长短id
    out_file="%s_out.txt"%header
    all_long_id,all_short_id=get_all_ids(path_n,out_file,pattern_short,pattern_long)
    #print all_long_id,all_short_id
    #将长和短id的列表转化为字典，这个字典的键为id值为出现的次数，利用预定义的模块计算出现的次数后返回字典
    short_id_dict,long_id_dict=count_freq_germ(path_n,out_file,all_short_id,all_long_id,pattern_short,pattern_long)
    #依次遍历短id和长id的字典
    for id_n,freq_n in short_id_dict.items():
        result_freq.write(id_n+"\t"+str(freq_n)+"\n")
    result_freq.write("long_ids"+"\t"+"frequency"+"\n")
    for id_n,freq_n in long_id_dict.items():
        result_freq.write(id_n+"\t"+str(freq_n)+"\n")
    
#定义一个function,该function的功能是通过给定的列表，来获取列表中各个元素的重复次数，用字典的形式返回{id:次数}
#输入参数：含有多个参数的列表
#输出结果：一个字典{id:次数}
def get_freq(list_n):
    #预定义一个字典储存结果
    dict_freq={}
    #首先将列表转化为集合，再遍历集合中的元素
    set_list=set(list_n)
    for char_n in set_list:
        num_char=list_n.count(char_n)
        dict_freq[char_n]=num_char
    #返回分析的结果
    return dict_freq
        

#定义一个function,该function的功能是对blastp输出的结果进行分析，获取其中的长id和短id
#输入参数：文件的绝对路径，blastp输出的文件名
#输出结果：
#注：这个程序主要是针对单行结果输出的文件进行解析，具体参数为：-max_target_seqs
def get_all_ids(path_n,file_n,pattern_short,pattern_long):
    #首先根据物种的不同选择不同的id匹配的正则表达式
    #regular_species={"human":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}-[\w]{1,3}[-]{0,1}[0-9]{0,1}\*[0-9]{2}",re.I),
    #                 "mouse":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}[*]{0,1}[-]{0,1}[\w]{1,3}[-]{0,1}[0-9]{0,1}[*]{0,1}[0-9]{1,2}",re.I),
    #                 "rabbit":re.compile("[a-zA-Z]{4}[0-9]{1,2}[\w]{0,2}[*]{0,1}[0-9]{2}",re.I),
    #                 "crab_eating":re.compile("[a-zA-Z]{4}[0-9]{1,2}[/]{0,1}[\w]{0,4}[-]{0,1}[\w]{1,3}[-]{0,1}[0-9]{0,1}\*[0-9]{2}",re.I),
    #                 "rhesus":re.compile("[a-zA-Z]{4}[0-9]{1,2}[\w]{0,2}[-]{0,1}[0-9]{1,2}[*]{0,1}[0-9]{2}",re.I)}
    #pattern_long=regular_species[species]
    #pattern_short=re.compile("[A-Za-z]{4}[0-9]{1,2}")
    os.chdir(path_n)
    all_long_id=[]
    all_short_id=[]
    with open(file_n,"r") as content:
        all_seq=content.readlines()
        for seq_n in all_seq:
            seq_n=seq_n.split("\t")[1]
            short_id,long_id=get_formal_germ_id(seq_n,pattern_short,pattern_long)
            all_long_id.append(long_id)
            all_short_id.append(short_id)
    return all_long_id,all_short_id
if __name__=="__main__":
    parser=argparse.ArgumentParser()
    parser.add_argument("-p","--path",type=str,default=".",metavar="path to fasta",help="specify the path of the fasta")
    parser.add_argument("species",type=str,default="human",choices=["human","mouse","rabbit","rhesus","crab_eating"])
    #获取所有的参数
    all_args=parser.parse_args()
    path_n=all_args.path
    if path_n==".":
        path_n=os.getcwd()
    species_n=all_args.species
    #path_n=r"/home/fanxuezhe/files/test_file/blastp"
    #species_n="human"
    os.chdir(path_n)
    files_all=os.listdir(path_n)
    for file_n in files_all:
        if file_n.endswith(".fasta"):
            record_id_freq(species_n,path_n,file_n)
    
